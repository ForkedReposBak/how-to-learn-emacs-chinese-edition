== 为 Emacs 作贡献

请考虑为 Emacs 贡献补丁，即使你是一个 Emacs 新手。特别是如果你是一个 Emacs 新手，没有人
比你更有资格来判断介绍文档的质量了。现在就贡献吧，在斯德哥尔摩综合症来临之前。

=== 报告一个 bug

M-x report-emacs-bug 将会打开一个 邮件 的缓冲区带有模板方便你填充内容。你大概还没配置 Emacs 来
发送邮件，但是你可以复制这个缓冲区的内容然后粘贴到你常用的邮件客户端中。

Do follow the instructions in that buffer. In particular, make sure you can reproduce the bug having run Emacs with emacs -Q (to confirm that it is a bug in Emacs itself and not in your customizations or in a third-party package).

=== 一个简单的文档修改

ido-find-file 的文档这样说到：

在阅读后我依然不知道 C-j （在 ido-find-file 提示时）实际上做了什么。
实际上它意味着 『使用任何你输入的每个字』而不是使用 ido 的模糊匹配。
我会提交一个不到给文档。


=== 上世纪80年代的补丁制作方法

TIP: M-x find-function ido-find-file.

TIP: 保存一个这个缓冲区的拷贝（使用 C-x C-w） 到 ~/.emacs.d/ido.el 和另一份拷贝到 ~/.emacs.d/ido.el.orig。

TIP: 修改 ~/.emacs.d/ido.el。要测试这个修改，求值（C-M-x）defun 从你的改变中。

TIP: 使用 diff -cp ido.el.orig ido.el 生成一个补丁 footnote:[Don’t ask me why the Emacs maintainers don’t like unified diffs (diff -u). They specifically ask for diff -c.]

=== 创建一个 21 世纪的补丁 footnote:[21 世纪需要半 G 磁盘空间和 30 分支的下载]

理想情况下你最好直接给最新的(未发布)的 Emacs 源码版本打补丁，而不是当前的 release 版。
因为其它人可能已经修复了你的问题！
Emacs 的源码在 savannah.gnu.org 然后你可以从官方的 Bazaar 仓库获得源码：
[source, shell]
bzr bracnch bzr://bzr.savannah.gnu.org/emacs/trunk

或者，如果你更喜欢 git， 可以从 git 的镜像(急说只比 Bazaar 的仓库进度晚一天)：

[source, shell]
git clone git://git.savannah.gnu.org/emacs.git

注意上面的任何一个命令都要花掉一些时间，但是你只要这样做一次。
我下面会使用 git 作为说明。

给你的修改创建一个私有（本地）分支：
[source, shell]
git checkout -b ido-el-documentation --track master

直接在源码上做修改，并测试。

[source, shell]
----
git commit -am "* ido.el: Documentation for C-j in ido-find-file and ido-switch-buffer."
git format-patch master
----

将来，在开始另一个更变前你需要把最新的改变从上游拉下来：

[source, shell]
git checkout master
git pull --rebase

footnote:[这里 --rebase 是用来避免冲突如果你在本地有没有推送到 master 分支的提交。虽然你遵循了说明，你的本地修改可能只在私有分支上，而不是 master 分支。]

=== 发送补丁

把补丁发送给和 M-x reprot-emacs-bug 同样的 email 地址。
但是首先阅读贡献的说明和 Emacs Lisp 的贴士和约定。

=== 给第三方包做贡献

试着去包的网站上找到贡献指南：提交补丁的 email 地址，建议的补丁格式和 changelog 消息，等等。
如果这个包是在 github 上的， 包维护者可能开放了 github 的 pull request 接口。
