== 修复那个糟糕的配色方案

Emacs 默认的配色方案被亲切地称为 "生气的水果沙拉".

=== 默认字体

"Fonts" 在 Emacs 手册中:

TIP: 在 'Options' 菜单中点击 'Set Default Font'. 要在将来的会话中保存, 点击 'Save Options' 在 'Options' 菜单.[2]

“DejaVu Sans Mono” 是一个很好地选择 (还有 Bitstream Vera Sans Mono”, 或者 OS X 10.6+ 上的 “Menlo” ).
要选择一个等宽的字体, 即使你喜欢用等比字体编程. 我们之后会提到 Emacs 对等比字体的处理.

菜单 “Save Options” 命令自动用新的设置修改你的初始化文件(也会在 echo 区域告诉你, 现在在 *Messages* 缓冲区中如果你错过了).

有一个 OS X 的 bug 会阻止 “Save Options” 保存默认字体.
OS X 用户就不得不使用我下面会解释的自定义字体机制来制定默认的字体名字.

=== 语法高亮颜色

Font Lock 模式是一个辅模式负责语法高亮.
你可以阅读 font-lock 模式如果你想要了解 Emacs 是如何判断注释, 关键字和变量的, 或者如果加入你自己的关键字.

但是仅仅去修改颜色:

TIP: 指出你想要修改的字体的名字: describe-face (默认是当前字体) 或者 list-faces-display.

TIP: 修改字体会提示你使用一个字体和每个要改变的属性. 保留属性为 "未指定" (默认情况) 来从默认字体继承. 至于前景色和背景色, 你可以使用预定义的颜色通过 tab 自动补全, 或者指定 RGB 值比如 #3f7f5f.

TIP: 自定义字体带来了"很容易自定的"借口我前面章节中警告过你不要去用. 点击 State 按钮然后选择为将来的会话保存.(你也可以在这个修改, 但是我更倾向 modify-face 因为它给你 tab 补全为每一个可能的值).

除了 descirbe-face, 我在帮助菜单中找到的, 我再 Emacs 手册的 “Faces”, “Standard Faces” and “Customizing Faces” 找到了其余的.

现在让我们弄明白如何疏通 “easy customization” interface:

TIP:
====
访问你的初始化文件查看 “easy customization” 加入了些什么.
如果你已经打开了文件, 你需要 revert-buffer 来看看最新的修改.

[source, elisp]
init.el
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:height 120 :family "Menlo"))))
 '(font-lock-comment-face ((t (:foreground "#3f7f5f")))))
====

You could configure the remaining font-lock faces by adding arguments to the custom-set-faces form,
 but they might be overwritten if you use the easy customization framework in future.
 Inspired by the name custom-set-faces,
 I searched for functions beginning with set-face and found set-face-attribute:


[source, elisp]
(set-face-attribute 'default nil :family "Menlo" :height 120)
(set-face-attribute 'font-lock-comment-face nil :foreground "#3f7f5f")
(set-face-attribute 'font-lock-string-face nil :foreground "#4f004f")
(set-face-attribute 'font-lock-constant-face nil :foreground "#4f004f")
(set-face-attribute 'font-lock-keyword-face nil :foreground "#00003f")
(set-face-attribute 'font-lock-builtin-face nil :foreground "#00003f")
(set-face-attribute 'font-lock-type-face nil :foreground "#000000")
(set-face-attribute 'font-lock-function-name-face nil
                    :foreground "#000000" :weight 'bold)
(set-face-attribute 'font-lock-variable-name-face nil
                    :foreground "#000000" :weight 'bold)


The above settings produce a very conservative dark-on-white color scheme. I like it because in many languages it highlights variable and function definitions but not their uses.

For all the face attribute names see “Face Attributes” in the Emacs Lisp manual. As to elisp syntax, keyword symbols like :foreground and :weight are constants (that evaluate to themselves so you don’t have to quote them).

=== diff-mode

While we’re on colors, let’s add some helpful coloring to diff-mode (which we came across earlier, in the section on the vc version control interface).[4]

TIP:
====
[source, elisp]
init.el
(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))
====

eval-after-load does what it says: The first time diff-mode is loaded, evaluate the following form. Emacs tends not to load every elisp package on startup, but waits until you actually use diff-mode to load it.

If you used (set-face-foreground 'diff-added ...) directly in your init file, you would get the error “invalid face diff-added”. You could explicitly load diff-mode (using require) in your init file, but that would increase Emacs’s startup time—ever so slightly—every time you run Emacs in the terminal for a quick job that won’t even use diff-mode.

eval-after-load takes a single form to evaluate, but we want to make two function calls, so we wrap them in progn which merely evaluates a bunch of forms sequentially. We quote it so that it doesn’t get evaluated right now, before even being passed to eval-after-load.

diff-mode.el.gz

;; provide the package
(provide 'diff-mode)
The first argument to eval-after-load has to match the name that the package provides (this usually matches the name of the command to enable the mode, but to double-check: C-h f diff-mode, follow the link to diff-mode.el.gz, and find the provide form near the bottom).

=== Color themes

Note: This section and the next, which deal with the color-theme package, were written for Emacs 23. color-theme is obsolete in Emacs 24, so I need to find a better example for installing third-party packages.

Maybe you already have a favourite color theme, like Zenburn or Solarized. There are Emacs implementations (Zenburn, Solarized) built on top of the color-theme minor mode. color-theme is a third-party package; it doesn’t come with Emacs.

Note that Emacs 24 provides a built-in mechanism for defining multiple color themes. Nevertheless, I’ll walk you through the process of installing third-party packages using color-theme and the Solarized theme as examples.

Emacs 24 also comes with a package management system, so—as long as the package’s author has taken advantage of the new mechanism—the manual installation procedure described below will not be necessary either.

=== Installing third-party elisp packages

I’ll assume that you are keeping your ~/.emacs.d under version control using git.[3]

color-theme’s installation instructions recommend using your package manager (apt-get install emacs-goodies-el or port install color-theme-mode.el, etc.) but I prefer to manage all my Emacs extensions in a single place. That place is my ~/.emacs.d directory, because I will eventually want an extension that isn’t provided by my system’s package manager.

TIP:
====
Download the color-theme.6.6.0.tar.gz and extract into ~/.emacs.d.

[source, shell]
git add color-theme.6.6.0;
git commit -m "color-theme 6.6.0 from http://www.nongnu.org/color-theme/";
====

TIP:
====
Add the color-theme directory to your Emacs load-path:

[source, elisp]
init.el
(add-to-list 'load-path "~/.emacs.d/color-theme-6.6.0")
====

TIP:
====
And actually load it:

[source, elisp]
(require 'color-theme)
====

Now you can select a theme with color-theme-select.

=== Installing packages from github

The Solarized color theme for Emacs is available on github. If you are keeping your ~/.emacs.d under version control using git, you can use git submodules to simplify the management of such third-party packages.

TIP:
====
[source, elisp]
cd ~/.emacs.d;
git submodule add https://github.com/sellout/emacs-color-theme-solarized.git;
====

In future you can use git pull from ~/.emacs.d/emacs-color-theme-solarized/ to get the latest changes.

TIP: Add ~/.emacs.d/emacs-color-theme-solarized/ to your Emacs load-path, and require 'color-theme-solarized, as you did for the color-theme package.

Now you can activate the theme with color-theme-solarized-light (or -dark).

=== Increasing the font size

C-x C-+, C-x C--, and C-x C-0. See “Temporary Face Changes”.

=== variable-pitch-mode

You can toggle between fixed- and variable-width fonts in a particular buffer with variable-pitch-mode. The face to customize is variable-pitch.

To automatically enable variable-pitch-mode, add it to the hooks for all the major modes where you want it to take effect. For example, to text-mode-hook for editing plain text.

If you really want it everywhere, I suppose there’s no harm in setting the default face to a proportional font. The great advantage of variable-pitch-mode, though, is that it is so easy to switch between proportional- and fixed-width fonts when you come across some ascii art or an ascii table in a comment.

[1]: I found this—after some dead ends—with Info’s index command, typing “font”, tab-completing, and trying whatever looked promising. I could just have explored the Options menu instead, but—silly me—I had disabled the menus because people on the internet said “real Emacs power users disable the menus.” That might make sense on a text terminal, where you can’t click the menu anyway, but on OS X, where there’s only one menu bar at the top of the screen, it’s just silly. See the next footnote.

[2]: If you have disabled the menu, perhaps because you’re using an init file copied from someone else or something like the Emacs starter kit, you can re-enable it just for this session with M-x menu-bar-mode.

[3]: cd ~/.emacs.d; git init .; git add init.el; git status; git diff --cached;
git commit -m "My emacs init file."

[4]: This customization—with several others—is borrowed from the Emacs Starter Kit.

Next: General customization
