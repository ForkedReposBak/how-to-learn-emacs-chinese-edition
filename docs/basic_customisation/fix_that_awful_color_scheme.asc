== 修复那个糟糕的配色方案

Emacs 默认的配色方案被亲切地称为 "生气的水果沙拉".

=== 默认字体

"Fonts" 在 Emacs 手册中:

TIP: 在 'Options' 菜单中点击 'Set Default Font'. 要在将来的会话中保存, 点击 'Save Options' 在 'Options' 菜单. footnote:[If you have disabled the menu, perhaps because you’re using an init file copied from someone else or something like the Emacs starter kit, you can re-enable it just for this session with M-x menu-bar-mode.]

“DejaVu Sans Mono” 是一个很好地选择 (还有 Bitstream Vera Sans Mono”, 或者 OS X 10.6+ 上的 “Menlo” ).
要选择一个等宽的字体, 即使你喜欢用等比字体编程. 我们之后会提到 Emacs 对等比字体的处理.

菜单 “Save Options” 命令自动用新的设置修改你的初始化文件(也会在 echo 区域告诉你, 现在在 *Messages* 缓冲区中如果你错过了).

有一个 OS X 的 bug 会阻止 “Save Options” 保存默认字体.
OS X 用户就不得不使用我下面会解释的自定义字体机制来制定默认的字体名字.

=== 语法高亮颜色

Font Lock 模式是一个辅模式负责语法高亮.
你可以阅读 font-lock 模式如果你想要了解 Emacs 是如何判断注释, 关键字和变量的, 或者如果加入你自己的关键字.

但是仅仅去修改颜色:

TIP: 指出你想要修改的字体的名字: describe-face (默认是当前字体) 或者 list-faces-display.

TIP: 修改字体会提示你使用一个字体和每个要改变的属性. 保留属性为 "未指定" (默认情况) 来从默认字体继承. 至于前景色和背景色, 你可以使用预定义的颜色通过 tab 自动补全, 或者指定 RGB 值比如 #3f7f5f.

TIP: 自定义字体带来了"很容易自定的"借口我前面章节中警告过你不要去用. 点击 State 按钮然后选择为将来的会话保存.(你也可以在这个修改, 但是我更倾向 modify-face 因为它给你 tab 补全为每一个可能的值).

除了 descirbe-face, 我在帮助菜单中找到的, 我再 Emacs 手册的 “Faces”, “Standard Faces” and “Customizing Faces” 找到了其余的.

现在让我们弄明白如何疏通 “easy customization” interface:

[TIP]
====
访问你的初始化文件查看 “easy customization” 加入了些什么.
如果你已经打开了文件, 你需要 revert-buffer 来看看最新的修改.

[source, elisp]
init.el
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:height 120 :family "Menlo"))))
 '(font-lock-comment-face ((t (:foreground "#3f7f5f")))))
====

你可以通过给 custom-set-faces 表单添加参数来配置维护 font-lock 字体,
但是它们可能被覆盖如果你在将来使用了 easy customization framework.
受到 custom-set-faces 这个名字的启发, 我搜索了以 set-face 开头的函数并且发现了 found set-face-attribute:

[source, elisp]
(set-face-attribute 'default nil :family "Menlo" :height 120)
(set-face-attribute 'font-lock-comment-face nil :foreground "#3f7f5f")
(set-face-attribute 'font-lock-string-face nil :foreground "#4f004f")
(set-face-attribute 'font-lock-constant-face nil :foreground "#4f004f")
(set-face-attribute 'font-lock-keyword-face nil :foreground "#00003f")
(set-face-attribute 'font-lock-builtin-face nil :foreground "#00003f")
(set-face-attribute 'font-lock-type-face nil :foreground "#000000")
(set-face-attribute 'font-lock-function-name-face nil
                    :foreground "#000000" :weight 'bold)
(set-face-attribute 'font-lock-variable-name-face nil
                    :foreground "#000000" :weight 'bold)


上面的配置产生了一个非常保守的 dark-on-white 配色方案.
我喜欢它因为在很多语言中它高亮了被定义的变量和函数而不是它们使用的.

查看 Emacs Lisp 手册中的 “Face Attributes” 可以找到所有的字体属性名字.
对于 elisp 语法, 关键字符号比如 :foreground 和 :weight 是常量.
(要对它们求值所以你不必用引号包含它们).

=== diff-mode

说起颜色, 让我们加入一些有用的配色在 diff-mode 中 (我们之前提到的, 在章节 vc version control interface). footnote:[This customization—with several others—is borrowed from the Emacs Starter Kit.]


[TIP]
====
[source, elisp]
init.el
(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))
====

eval-after-load 顾名思义: diff-mode 第一次被加载, 对后面的形式求值.
Emacs 不会在启动时加载每一个 elisp 包, 而是等到你真正使用 diff-mode 才去加载它.

如果你直接在 init 文件里使用 (set-face-foreground 'diff-added ...) 地话.
你会得到一个错误 “invalid face diff-added”.

其实你可以在初始化文件里加载 diff-mode (使用 require), 但是这会增加 Emacs 的启动时间,
所以当你需要在终端启动 Emacs 来作一个快速工作时会有轻微的延迟即使你不使用 diff-mode.

eval-after-load 由一个简单的求值构成, 但是我们想要创建两个函数调用, 所以我们把他们封装到 progn 中, 仅仅对一系列表达式连续求值.
我们把他们用引号括起来, 这样它们就不会被立刻执行, 直到被传到 eval-after-load 时.

diff-mode.el.gz

;; provide the package
(provide 'diff-mode)
eval-after-load 的第一个参数需要匹配包提供的名字(这通常匹配被模式启动的命令的名字), 但是重复检查下: C-h f diff-mode, 跟随 diff-mode.el.gz 的链接, 发现靠近底部提供的表达式.


=== 安装第三方的 elisp 包

我假设你已经把你的 ~/.emacs.d 纳入 git 版本控制了. footnote:[cd ~/.emacs.d; git init .; git add init.el; git status; git diff --cached;git commit -m "My emacs init file."]

color-theme 的安装说明推荐你使用包管理器(apt-get install emacs-goodies-el 或者 port install color-theme-mode.el 之类的)
但是我更喜欢在一个地方管理我所有的 Emacs 扩展.
那个地方就是我的 ~/.emacs.d 目录, 因为我终究会碰到一个我的系统包管理器没有提供的扩展.


[TIP]
====
Download the color-theme.6.6.0.tar.gz and extract into ~/.emacs.d.

[source, shell]
git add color-theme.6.6.0;
git commit -m "color-theme 6.6.0 from http://www.nongnu.org/color-theme/";
====

[TIP]
====
Add the color-theme directory to your Emacs load-path:

[source, elisp]
init.el
(add-to-list 'load-path "~/.emacs.d/color-theme-6.6.0")
====

[TIP]
====
And actually load it:

[source, elisp]
(require 'color-theme)
====

Now you can select a theme with color-theme-select.

=== 从 github 安装包

Solarized 的 Emacs 配色主题在 github 上.
如果你使用 git 管理你的 ~/.emacs.d 目录, 你可以使用 git submodules 来简单地管理这样的第三方包.

[TIP]
====
[source, elisp]
cd ~/.emacs.d;
git submodule add https://github.com/sellout/emacs-color-theme-solarized.git;
====

以后你可以在 ~/.emacs.d/emacs-color-theme-solarized/ 使用 git pull 来获取最新的更变.

TIP: Add ~/.emacs.d/emacs-color-theme-solarized/ to your Emacs load-path, and require 'color-theme-solarized, as you did for the color-theme package.

现在你可以使用 color-theme-solarized-light (或者 -dark) 来激活主题了.

=== Increasing the font size

C-x C-+, C-x C--, and C-x C-0. See “Temporary Face Changes”.

=== variable-pitch-mode

你可以在 fixed- 和 variable-width 字体在一个特定的缓冲区中使用 variable-pitch-mode 来切换.
自定义的 face 是 variable-pitch.

想要自动启用 variable-pitch-mode, 把它加入到所有你要生效的主模式的钩子中.
比如, 在 text-mode-hook 里编辑纯文本.

如果你要在任何地方都使用它, 我先假定给一个等比字体设置默认字体是无害的.
variable-pitch-mode 的巨大优势是, 它很容易就可以在等比和等宽字体之间切换当你在一个注释中使用一些字符画和字符表格时.

[1]: I found this—after some dead ends—with Info’s index command, typing “font”, tab-completing, and trying whatever looked promising. I could just have explored the Options menu instead, but—silly me—I had disabled the menus because people on the internet said “real Emacs power users disable the menus.” That might make sense on a text terminal, where you can’t click the menu anyway, but on OS X, where there’s only one menu bar at the top of the screen, it’s just silly. See the next footnote.
