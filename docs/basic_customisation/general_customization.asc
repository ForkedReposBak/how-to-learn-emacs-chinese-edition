== 常用自定义选项

=== ido-mode

其他的编辑器和 IDE 们有好看的文件夹和文件的树状视图，也有 tabs 来在缓冲区之间切换。
Emacs 有一个比较丑陋的树形视图 M-x speedbar。如果你想要看看有多丑的话。
但是真正的 Emacs 的答案去在大型项目中导航是 ido 模式。

[source, elisp]
init.el
(ido-mode 1)

ido 模式重新绑定了 find-file 和 switch-to-buufer 的按键为更强大的版本。
你只需要输入文件或者缓冲区的名字的一些字母（不必一定是名字的开头，也不必一定是相邻的字母）。
一个符合的列表，按照最近使用的排序，就会显示在 minibuffer 中；使用左右箭头（或者 C-s 和 C-r）
来在符合的列表中导航。如果没有项目的项目，在一个简明的（客配置）的暂停后，ido 会从之前使用的目录中搜索。

因为回车会打开第一个符合的文件，想要打开一个目录你需要使用 C-d。或者你可以使用 C-f（在 ido-find-file 提示下）来进入普通的 find-file

ido 和 Emacs 和搭配但是在手册中没有出现过；阅读 ido-file-file 的在线帮助。
想知道更多细节和配置说明，使用 C-h f ido-mode 来找到它的 elisp 实现，
并且阅读 elisp 文件的很长的开头注释。

Emacs 用户倾向于在使用完缓冲区后还是让它们保持打开状态，然后过了一段时间有了上百个打开的缓冲区
那么 ido-switch-buffer 就变成了有效的 『在项目中找到文件』。

要保存你的打开文件列表在不同的 Emacs 调用之间，或者分别管理不同套的打开文件（如果你同时工作在多个项目之间），
查看 Emacs 手册中的『保存 Emacs 会话』。

=== 朴素简约

想要最大化你的屏幕空间，考虑一下禁用工具栏和滚动条：

[source, elisp]
init.el
(tool-bar-mode -1)
(scroll-bar-mode -1)

类似的，你可以禁用菜单栏（menu-bar-mode -1），所让我觉得菜单栏在探索 Emacs 的特性时很有用；
主模式和辅模式常常会把它们自己的菜单加到菜单栏中。正如前面提到的，你肯定不应该在 OS X 中禁用菜单栏；
如果你想要在不同的环境中共享 Emacs 的初始化文件，你可以根据变量 system-type 和 window-system 来
有选择性的禁用菜单栏。

有一些命令比如 revert-buffer 会强制你通过输入 yes 来确认；
如果可以只输入 y 来确认那想必是极好的。
如果你查看 revert-buffer 的定义你会发现它调用了 yes-or-no-p, 你可以重定义为 y-or-n-p：

[source, elisp]
(defun yes-or-no-p (prompt)
  (y-or-n-p prompt))

或者更简单

[source, elisp]
(defalias 'yes-or-no-p 'y-or-n-p)

另一件事人们在安装好之后就会做的就是阻止 Emacs 的自动保存一个 ~ 开头的备份文件：

[source, elisp]
(setq make-backup-files nil)

应该使用你的版本控制工具来备份。

=== 在 Emacs Lisps 之间导航

在前面几章中我已经鼓励你来探索 Emasc 的功能通过直接学习 elisp 代码。
为了让这个工作更容易，我们已经看到了 show-paren-mode 和 eldoc-mode;
让我们在全局启用它们因为我们在其他编程语言中也用得上。

[source, elisp]
(show-paren-mode 1)
(eldoc-mode 1)

我们也重新绑定了 M-。从它原本的 find-tag 到 find-function-at-point，但是仅仅对用 elisp 文件而言，
因为你不需要一个 tags 的 table 因为 Emacs 已经知道了所有它已经加载的 elisp 函数。

[source, elisp]
(define-key emacs-lisp-mode-map
  (kbd "M-.") 'find-function-at-point)

如果你计划写很多 Lisp 的话，paredit-mode 总是能让你的括号对等，对于重构时的大范围移动也很有用。

=== shell

如果你尝试过运行一个程序比如 git 在 M-x shell 下，你会看到一个警告 『terminal is not fully functional』
在不能使用的行为之后。因为 git 发送了它的输出通过一个分页（通常是 less），这需要一个真正的终端模拟器。

设定 PAGER 环境变量到 /bin/cat （但是仅仅在 Emacs 中这样）能解决这个问题：

[source, elisp]
init.el
(setenv "PAGER" "/bin/cat")

这也能让你在 M-x grep 中使用 git grep。

确保你不会覆盖 PAGER 在你的 ~/.gitconfig 文件或者 GIT_PAGER 环境变量中（和 man 程序的 MANPAGER 等等).

如果你需要在你的 ~/.bashrc 文件(或你选择的shell相符的配置文件)中自定义，你可以在环境变量 INSIDE_EMACS 中测试 。
参考手册如何配置 Emacs 使用的 shell。

=== 其它想法

其他的你可能想做的自定义被 Emacs 手册包含了：

* http://www.gnu.org/software/emacs/manual/html_node/emacs/Minor-Modes.html[Minor Modes].

* http://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html[Making Buffer Names Unique].

* http://www.gnu.org/software/emacs/manual/html_node/emacs/Cursor-Display.html[Displaying The Cursor (in particular global-hl-line-mode)].

你可以查看其他人的初始化文件来获得更多的灵感，在 http://www.emacswiki.org/emacs/CategoryDotEmacs[Emacs wiki] 和http://sites.google.com/site/steveyegge2/my-dot-emacs-file[因特网上有很多]。
一些我体积的自定义配置来自 http://github.com/technomancy/emacs-starter-kit[Emacs Starter Kit], 一个 elisp 文件的集合用来提供 『一系列你平常使用 Emacs 更舒服的默认配置』。
