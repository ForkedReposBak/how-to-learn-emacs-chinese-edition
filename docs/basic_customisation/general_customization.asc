== General customization

=== ido-mode

其他的编辑器和 IDE 们有好看的文件夹和文件的树状视图，也有 tabs 来在缓冲区之间切换。
Emacs 有一个比较丑陋的树形视图 M-x speedbar。如果你想要看看有多丑的话。
但是真正的 Emacs 的答案去在大型项目中导航是 ido 模式。

[source, elisp]
init.el
(ido-mode 1)

ido 模式重新绑定了 find-file 和 switch-to-buufer 的按键为更强大的版本。
你只需要输入文件或者缓冲区的名字的一些字母（不必一定是名字的开头，也不必一定是相邻的字母）。
一个符合的列表，按照最近使用的排序，就会显示在 minibuffer 中；使用左右箭头（或者 C-s 和 C-r）
来在符合的列表中导航。如果没有项目的项目，在一个简明的（客配置）的暂停后，ido 会从之前使用的目录中搜索。

因为回车会打开第一个符合的文件，想要打开一个目录你需要使用 C-d。或者你可以使用 C-f（在 ido-find-file 提示下）来进入普通的 find-file

ido 和 Emacs 和搭配但是在手册中没有出现过；阅读 ido-file-file 的在线帮助。
想知道更多细节和配置说明，使用 C-h f ido-mode 来找到它的 elisp 实现，
并且阅读 elisp 文件的很长的开头注释。

Emacs 用户倾向于在使用完缓冲区后还是让它们保持打开状态，然后过了一段时间有了上百个打开的缓冲区
那么 ido-switch-buffer 就变成了有效的 『在项目中找到文件』。

要保存你的打开文件列表在不同的 Emacs 调用之间，或者分别管理不同套的打开文件（如果你同时工作在多个项目之间），
查看 Emacs 手册中的『保存 Emacs 会话』。

=== 朴素简约

想要最大化你的屏幕空间，考虑一下禁用工具栏和滚动条：

[source, elisp]
init.el
(tool-bar-mode -1)
(scroll-bar-mode -1)

类似的，你可以禁用菜单栏（menu-bar-mode -1），所让我觉得菜单栏在探索 Emacs 的特性时很有用；
主模式和辅模式常常会把它们自己的菜单加到菜单栏中。正如前面提到的，你肯定不应该在 OS X 中禁用菜单栏；
如果你想要在不同的环境中共享 Emacs 的初始化文件，你可以根据变量 system-type 和 window-system 来
有选择性的禁用菜单栏。

有一些命令比如 revert-buffer 会强制你通过输入 yes 来确认；
如果可以只输入 y 来确认那想必是极好的。
如果你查看 revert-buffer 的定义你会发现它调用了 yes-or-no-p, 你可以重定义为 y-or-n-p：

[source, elisp]
(defun yes-or-no-p (prompt)
  (y-or-n-p prompt))

或者更简单

[source, elisp]
(defalias 'yes-or-no-p 'y-or-n-p)

Another thing everyone does the second they install Emacs is to
prevent the creation of a “~”-suffixed backup file on every save:


(setq make-backup-files nil)
Rely on your version control system for backups instead.

=== Navigating Emacs Lisp

In the last couple of chapters I have encouraged you to discover Emacs functionality by studying the elisp code directly. To make the job easier we already saw show-paren-mode and eldoc-mode; let’s enable them globally because they’re useful in other programming languages too.

(show-paren-mode 1)
(eldoc-mode 1)
We’ll also re-bind M-. from its default find-tag to find-function-at-point, but only for elisp files, for which you don’t need a tags table because Emacs already knows all about every elisp function it has loaded.

(define-key emacs-lisp-mode-map
  (kbd "M-.") 'find-function-at-point)
If you plan on writing a lot of Lisp, paredit-mode is great for always keeping your parentheses balanced, and for moving whole forms around when refactoring—but it does take some getting used to.

=== shell

If you ever tried to run a program like git under M-x shell, you will have come across the warning “terminal is not fully functional” followed by unusable behavior. This is because git sends its output through a pager (probably less), which requires a real terminal emulator.

Setting the PAGER environment variable to /bin/cat (but only inside Emacs) solves this problem:

init.el
(setenv "PAGER" "/bin/cat")
This also allows you to use git grep from M-x grep.

Make sure you don’t override PAGER in your ~/.gitconfig file or the GIT_PAGER environment variable (and MANPAGER for the man program, etc).

If you need to make customizations in your ~/.bashrc file (or the corresponding file for your shell of choice) you can test for the environment variable INSIDE_EMACS. To configure which shell Emacs uses, see the manual.

=== Other ideas

Other customizations you might like to make are covered by the Emacs manual:

Minor Modes.
Making Buffer Names Unique.
Displaying The Cursor (in particular global-hl-line-mode).
For further inspiration you might want to look at other people’s init files, widely available on the Emacs wiki and on the internet at large. Some of the customizations I have presented here came from the Emacs Starter Kit, a collection of elisp files to provide “a more pleasant set of defaults than you get normally with Emacs”.

Next: Info documentation
