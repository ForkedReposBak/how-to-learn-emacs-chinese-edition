== 人体工程学

下面提到的大多数建议都严重依赖 Control 键, 所以绑定你的 Caps Lock 到 Control键吧.
这在 OS X 和 Linux 下很简单, 在 Windows 上调用一个注册表.

你可能选择交换左 Control 键和 Caps Lock 键, 或者仅仅让它们都变成 Control 键 - 在 Emacs 和 bash 中你可以使用
M-u (upcase-word) 来大写一个单词, 使用 C-x C-u (upcase-region) 大写一个区域.

现在你将会发现导航键比如 C-f, C-b, C-n 和 C-p 都和你键盘上的方向键很接近. 学习更大的导航跳跃使用 C-a 和 C-e
(一行的开始和结束), M-f 和 M-b (前进和后退一个单词), C-M-f 和 C-M-b (前进和后退一个区块根据一个花括号或圆括号),
和 M-a 和 M-e (一个语句或表达式的开始和结束).

如果你需要移动到一个很远的地方, 使用 C-s 搜索通常会更快.

对于修改错字, C-t (transpose-chars) 很方便.

与其伸手去按退格键, 试试使用 C-h 来退格(就像在大多数 shell 中一样), 使用 C-w 来反向杀词(在大多数 shell 中也适用;
在 Emacs 中通常绑定到 C-backspace). C-d 删除下一个字符, 你甚至不需要自己去绑定它.

重新绑定 C-h 有一点棘手, 因为在你绑定之后你能在一些主模式或者辅模式中绑定一个新的序列使用 C-h,
取消你自己的绑定. 你可以使用 key-translation-map 来让 C-h 在 Emacs 中作为退格键, 忽视所有的现在或将来的 C-h 绑定.

[source, lisp]
(define-key key-translation-map (kbd "C-h") (kbd "<DEL>"))

你还是可以使用帮助命令使用 F1 f, F1 v, F1 s, 等等。

比如说 C-w， 你可以定义你自己的函数来保持默认行为当选择区被激活，然后做 backward-kill-word 当没有被激活时：

[source, lisp]
(defun kill-region-or-backward-kill-word (&optional arg region)
  "`kill-region' if the region is active, otherwise `backward-kill-word'"
  (interactive
   (list (prefix-numeric-value current-prefix-arg) (use-region-p)))
  (if region
      (kill-region (region-beginning) (region-end))
    (backward-kill-word arg)))
(global-set-key (kbd "C-w") 'kill-region-or-backward-kill-word)

这些小贴士有一部分是受到 Steve Yegge 的 http://sites.google.com/site/steveyegge2/effective-emacs[Effective Emacs]的启发。去看看吧。
