== OS X

=== Control 和 Command 键

Mac 的键盘很方便的拥有独立的 Control，Meta (也称 Option 或 Alt) 和 Command (⌘)键。你有传统的 Emacs 键位绑定在
Control 和 Meta 键上，也有 OS X 的键位绑定在 Command 键上。

正如前面讲到的，你非常应该考虑一下重新绑定 Caps Lock 和 Control 键，在系统层面上。在 系统配置 》 键盘 》 修饰键。

在笔记本的娇小的键盘上，右边是没有 Control 键的。好的人体工学实践是使用一个右手边的 Control 键和一个左手边的普通键，
而不是拉伸你的左手。你可以使用开源的 KeyRemap4MacBook 来绑定你的回车键作为一个额外的 Control 键仅仅在按下时；
单次的击键仍然被注册为回车。试试看吧！它没听起来那么疯狂。KeyRemap4MacBook, 尽管名称不是很准确，在任何近期的 Mac 上都能工作。

在你经历了最初的学习曲线并且习惯了 Emacs 的绑定对于 打开，保存，复制，剪切，粘贴，和撤销后，你可能想要重新绑定 Command 键
为额外的 Meta 键，让你的手指更容易的按到目标。


[source,lisp]
.init.el
----
(setq mac-command-modifier 'meta)
(global-set-key (kbd "M-`") 'other-frame)
----

(第二行保留了每一个使用 ⌘- 的行为.)

用这种方式重新绑定 Command 键在一个终端中的 Emacs 是不管用的, 因为终端程序会拦截 Command 按键.

如果你选择不是用 Command 键, 你可能想要重新绑定 ⌘-q 因为它很接近经常使用的 M-q.
或者至少让 Emacs 在关闭前给个提示.

[source,lisp]
(setq confirm-kill-emacs 'y-or-n-p)

=== 系统级的 PATH

当你从 Finder(或者 Dock, 或者 Spotlight)启动 Emacs.app  时, 环境不会包含你的自定义的 .bash_profile 或者 .bashrc 文件.
如果你运行一个 shell 在 Emacs 中 (M-x shell), 那个 shell 会加载你的 .bashrc, 但是其他的 Emacs 命令比如 shell-command, grep 和 compile 不会.

你可以修改 Emacs 的 environment 目录在你的初始化文件中:

[source, lisp]
(setenv "PATH" (concat (getenv "HOME") "/bin:" "/opt/local/bin:" (getenv "PATH")))


你也可以设置环境变量去应用到任何 OS X 的应用在你的 login 会话中, 通过创建文件 ~/.MacOSX/environment.plist:

[source, xml]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>PATH</key>
  <string>/usr/bin:/bin:/usr/sbin:/sbin</string>
</dict>
</plist>


=== 从命令行运行 Emacs

如果你使用 macports 安装 Emacs.app, 你会发现命令行版本在 /Applications/MacPorts/Emacs.app/Contents/MacOS/Emacs
(当你需要运行 Emacs 和某种命令行的切换比如 -Q 时很有用)
